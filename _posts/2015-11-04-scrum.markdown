Привет!

Ты попросила написать про скрам, я как раз собирался собрать свое понимание в кучку, и подумал, что написать такое письмо будет для меня хорошей возможностью это сделать. Я тут буду иногда писать какие-то известные вещи, если ты это знаешь, пропускай. В любом случае попробую сфокусироваться на моем личном опыте в рамках скрама.

Прежде всего scrum, на мой взгляд, слово сильно перегруженное, в теории все довольно четко прописано, но скрамом называются как у ежедневный пятиминутный митинг на тему того, кто что сделал, и что будет делать, но также и сам процесс, который довольно редко является, на мой взгляд, чистым скрамом с точки зрения методологии.

Скрам является одной из разновидностей agile процессов, которые в свое время просто переименовались из xp - экстремального программирования. В каком-то смысле и xp и agile - это одна и та же штука, если какой-то человек тебе будет говорить, что это не так - он или молодой идеалист или педант технологических процессов. Просто сначала появился xp, ввел такие интересные подходы, как test-driven разработку, парное программирование и короткие циклы разработки, потом появились сообразительные парни, которые решили, что продать бизнесу слово "экстремальный" не очень просто, а вот "гибкий" - отличный маркетинговый подход. Взяли и переименовали в agile - добавив осмысление методов проектного управления (если вообще что-то добавили, на мой взгляд, все это уже было и в xp) 

В любом случае все эти подходы противостоят стандартному waterfall, с длинным циклом планирования, документирования, больших трудных релизов, который, по-хорошему никогда не работал, в том смысле, что всегда были проблемы следующего рода:
- очень трудно сделать релиз вовремя, даже была такая шутка, что релиз никогда не бывает сделан вовремя, по крайней мере в Дойче это всегда был жесткий челленж успеть к обещанной дате, часто приходилось закладывать большие гэпы по времени, до 30% расчитанного времени
- бизнес часто изменяет требования по ходу дела, особенно, если учесть, что в таком цикле релиз делается несколько месяцев, подчас начинается requirements hell, когда скоуп проекта приходится перестраивать в середине иногда полностью, просто потому что большому боссу нужно срочно что-то показать еще более большому боссу.

Agile решает эти проблемы. Scrum добавляет к процессу формальности и по хорошему дает удобную стандартную схему ведения проекта. Но есть одно важное "но" - не надо забывать самый важный принцип agile - команда сама выстраивает процесс, главная идея - это свобода, до тех пор, пока она деливерит бизнесу то, что он хочет.

Тут очень важен баланс того, как команда хочет разрабатывать решения и того, какой результат она получает в остаточном итоге. Это главный критерий - команда должна выдавать продукт, который хочет бизнес. Часто неопытные, но воодушевленные лиды скатываются в процесс, который суперприятен для разработчиков, дает им большое количество свободы, но при этом буксует в плане выдачи продукта или наоборот, закостенелый менеджер, пытаясь создать agile процесс, пытается управлять проектом вручную, запрещает парное программирование "потому что релиз уже скоро и нужно напрячься" или меняет скоуп разработки на ходу "потому что пришел А и он очень хочет эту фичу и я не могу ему отказать".

Scrum в этом смысле предлагает форму, которая пытается ограничить оба влияния. С одной стороны он не дает разработчикам расслабиться и требует постоянного деливери в виде демонстраций заказчику под конец итерации и ежедневных отчетов о том, что ты делаешь, с другой стороны ограничивает доступ заказчика к процессу, оставляя ему только возможность влиять на работу в виде постановки будущих задач и расстановки приоритетов.

Ключевое слово здесь - самоорганизация. Лучший результат от работы команды возникает, когда разработчики чувствую себя комфортно и легко находят лучшие точки приложения своих способностей, отсюда возникает синергия, если только представитель заказчика умеет удерживать цель существования команды - разработка продукта.

Тем не менее, и мне кажется это важным, команда не обязана все делать точно по процессу, даже более того, попытка все делать по букве скрама иногда убивает всю идею agile разработки, хотя это все зависит от зрелости команды и ее членов и подчас иногда навязывание процесса помогает ее организовать. Это очень тонкий баланс и определяется он только удовлетворенностью бизнеса в продукте, который производит команда. 

В этом смысле процесс выстраивается самостоятельно, если соблюдено условия невовлеченности заказчика в изменение процесса разработки (он только говорит, что ему нужно) и отсутствие авторитарного лида (хотя в случае трудной команды не энтузиастов это может быть полезным, но тут требуется хороший эмоциональный интеллект завести людей).

Но это все теория, в чем практика.

Во-первых, как строится команда. Такого рода процессы строятся тем проще, чем меньше команда, максимум людей я наблюдал в Дойче - там было под 30 человек. На мой взгляд, такие большие команды надо дробить и устраивать процессы отдельно. Хотя это может быть воспринято апологетами agile, как ересь, тем не менее, команда с высокой культурой взаимодействия и самосознания, на мой взгляд, способна поддерживать аджайл процесс и в таком количестве. Просто встречи и митинги будут сильно дольше. Идеально, конечно, количество людей около 10 человек.

Здесь важно отметить, что сама идея agile предполагает, что команда целостна, то есть она содержит полный набор профессий, чтобы заделиверить продукт бизнесу. В скрамах участвуют и разработчики и тестировщики и аналитики и деплоймент инженеры. Подчас возникает проблема, что разработчики видят здесь себя главными, а остальные специализации считают второсортными. Это серьезная ошибка, разработчик никогда не сможет заделиверить продукт без того, чтобы его работу протестировали, саппортер не собрал свои скрипты для мониторинга системы, а деплоймент инженер не накатил релиз на продакшн. 

Но в случае больших команд возможно деление по принципу функциональности (например, у тестировщиков свой скрам), хотя это совсем уж extreme и опять же, требудет очень большой осознанности команды, а также хорошей организации scrum of scrums. Лучше такого не делать, хотя был и такой опыт.

Кроме команды, есть две важные роли. Первая - это представитель заказчика (может быть сам заказчик). Это человек, который знает, что нужно бизнесу и имеет возможность часто общаться с командой, посещать ее митинги. Несмотря на то, что это кажется простым, тем не менее, найти такого человека очень сложно. 

Обычные трудности - это оказывается сам заказчик, человек, который платит деньги людям и подчас он начинает вести себя, как король, каждое распоряжение которого должно исполняться, в том числе и относительно рабочего процесса. Это приводит к тому, что команда теряет свою самостоятельность и начинает лизать задницу или просто подчиняться. Несмотря на то, что он определяет приоритеты и ставит задачи, абсолютно не его дело, как команда реализует их, главное, чтобы она начинала с самых важных задачек и могла выдавать прогнозируемые результаты.

Главный критерий здесь - человек должен уметь в нужный момент отодвинуть свои эмоции и дать людям делать свое дело. Это требует высокого эмоционального интеллекта, который может заменить обычное человеческое уважение к разработчикам, как людям не низшего сорта, но как к профессионалам, которые знают, что делают. Очень хорошим вариантом может быть бывший айтишник в бизнесе, или аналитик, который общается с бизнесом и разбирается в том, что конкретно нужно. 

Второе важное умение формулировать задачи в виде user stories. Это довольно смутная штука, я редко видел хорошо написанные user story, обычно все скатывается в требование имплементировать фичу x, в которой написано, что нужно реализовать такой-то алгоритм или такие то экраны. По хорошему, здесь очень важно написать, как системой будут пользоваться и что они будут от нее получать. Даже неважны какие-то технические детали, а важно человеческое понимание того, что это такое и зачем это нужно бизнесу. Задачу всегда можно разбить на подзадачи и главное здесь - вовлечение разработчика в сферу интересов бизнеса, чтобы он хотел, чтобы эта возможность появилась у заказчика или у клиента системы и понимал, зачем она им будет нужна.

Вторая роль - это скрам мастер. На самом деле я ни разу не видел выделенного скрам мастера, обычно эту роль играл или dev lead, или просто опытный разработчик, который понимает процесс. Все равно обычно сохраняется паралелльная иерархия и всегда есть lead, который отвечает за команду. Scrum master - это нечто другое, это человек, который следит за процессом и по-хорошему, им может быть кто угодно.

Его задачи - следить за тем, чтобы положенные процессом встречи состоялись, чтобы на них не было лишней болтовни, чтобы агенда соблюдалась, чтобы все сказанное было как-то зафиксировано (пусть даже в его памяти). Если встает вопрос о процессе, то он является последней инстанцией в вопросе о том, как что организовывать. 

Я наблюдал процессы, где роль скрам мастера передавалась от человека к человеку. Не могу сказать, что это было эффективно, но это тоже работало, команда поправляла человека, если он забывал какие-то вещи. Главное тут, конечно, зрелось команды. В каком то смысле скрам - это демократия в локальном масштабе. Если скрам мастер не выполняет свою роль в том, чтобы команда деливерила продукт, очень скоро ему должны начать говорить, что он делает что-то не так и просить изменений в процессе. Если он не в состоянии адаптировать процесс к нуждам команды, которые сохраняют выдачу результата, его нужно менять.

На мой взгляд, обе роли - это разложенный на составляющие проджект менеджер из старого ватерфольного процесса, попытка выкинуть из роли пма весь ненужный шлак, который мешает работать тем пмам, которые сфокусированы на результате. Тем не менее паралельную иерархию никто не отменял, хотя возможно, когда она ложится на скрам, пм - это представитель заказчика в команде, который общается с бизнесом и знает, что нужно от его команды, заводит задачи и следит за их чистотой, а дев лид - это скрам мастер, который следит, чтобы проект двигался по скраму. Хотя это совсем не обязательно и роли могут не совпадать с позициями. В таком случае обе роли должны иметь какой-то authority чтобы настаивать на своих мнениях и иметь прямую поддержку бизнеса, это очень важно, иначе процесс просто нельзя будет отстраивать и все свалится в исполнение приказов.

Разработка производится короткими циклами и очень важно, чтобы в конце разработки были какие-то ощутимые результаты, которые можно показать бизнесу, которые он оценит, как важные и нужные. Это звучит красиво в теории, но местами очень трудно достижимо. Здесь одна из самых больших трудностей скрама, на мой взгляд. Если речь идет о продукте, то тут все просто - есть юзер сторис, которые можно продемонстрировать на новой версии продукта на тестовой среде, вот мол, теперь можно сделать то-то и то-то. Мы работали две недели и теперь вы можете предлагать клиентам вот такие новые возможности.

В случае с чистой бэкенд системой, когда пользователями являются другие системы, это уже не так просто. Тут прежде всего непонятна роль представителя заказчика - это должен быть какой-то айтишник, который хорошо представляет нужды бизнеса и может формулировать эти требования на языке системы, которая разрабатывается. Хорошо, если эти требования можно формулировать, как набор тестов. Тогда демонстрацей может быть просто показ работы каких-то эмуляторов, которые производят нужные действия и выдают результат. Но в идеале, демонстрация должна производится на конечной платформе с участием разрабатываемой системы на UAT контуре. 

В любом случае демо очень важно. Прежде всего для обратной связи от заказчика (часто депо проводятся представителю а не самому заказчику), команда должна увидеть, как реагирует заказчик на ту или иную фичу или проблему в системе. Потом они сами будут понимать, что важно, а что не важно (если, конечно, заказчик мотивированно обьяснил причины). Так же команда должна иметь возможность лично проецировать свои собственные представления о том, что творится в системе, чтобы предупредить заказчика о сложностях и трудностях, ведь часто бывает так, что команда является первыми пользователями системы и видит все ее косяки. То есть на демо должны говорить разработчики.

Демо хорошо делать ритуальным. Это должна быть хорошо знакомая процедура, когда все делается на большом экране (у нас в Роботе мы подключали айфон к большому экрану и работали с него) или в отдельном помещении, что-то особенное, а не просто все сели и посмотрели на монитор ведущего разработчика. Должны быть какие-то плюшки, раскованная атмосфера и при этом ощущение ответственности, что вот сейчас мы покажем, что мы сделали и это важно для заказчика.

В принципе, демо может и отсутствовать. Это очень не круто, но такое тоже случается. Просто тогда демо происходит независимо (заказчик сам посмотрел, что все работает, все произошло в кулуарах), но это сильно уменьшает ценность скрама и опять же требует большой сознательности команды. Лучше такого не допускать. В конце каждого цикла должно быть демо, которое не только показывает заказчику, что было сделано, но и дает знать команде, сколько из того, что она делала, интересно и полезно бизнесу.

Длина итерации не так важна, главное, чтобы было что успеть сделть полезного за это времени всем членам команды и не было жалко той доли времени, которая уходит на процесс - планирование, ревью и ретроспективу. Если делать недельный скрум то просто на все эти процессы обычно уходит минимум день, а жалко тратить 20% рабочего времени на то что деливери не производится.

Две недели - типичный срок и все процессы в таком случае, должны укладываться в день. Вообще круто планировать последний день итерации так, что с утра происходит ревью и демо, смотрят, что наделали, представитель заказчика подводит итоги того, что можно заделиверить на продакш, потом происходит планирование, отбираются задачки в новую итерацию, оцениваются, потом, когда уходит прдставитель заказчика (или если он согласен молчать или не сильно выступать), проводится ретроспектива - обсуждаются все, что понравилось в этой итерации, очень важно уметь находить хорошее, прямо нужно назвать хотя бы пару вещей, которые были полезны или понравилось, не должно быть так, что речь только о проблемах. А вот потом уже про проблемы и про то, что можно сделать, чтобы избегать этих проблем в будущем. 

В принципе можно разбить это на разные встречи в разные дни, но практика показывает, что люди гораздо более раслабленно работают, если сегодня вечером у них уже демо, а завтра планирование... Ни разу не видел идеала, но на мой взгляд, это наиболее эффективно.

Ну и самая незначительная часть, на первый взгляд - сам скрум - ежедневная встреча на пять минут, по-русски планерка. Каждый член команды отвечает на три вопроса: Что я сделал, что буду делать, что мешает мне делать то, что я собираюсь. Все обсуждения должны твердой рукой выносится в отдельные встречи, хотя бы сразу после скрама, сам скрам должен занимать очень мало, минут пять. Отсюда и идея стоять во время скрама, хотя это и не принципиально.

Вот и все составляющие самого процесса с точки зрения событий. В целом - происходит планирование на небольшой короткий срок, люди берут задачи и делают их, под конец выпускается мини-релиз на тестовый контур, заказчику показывается, что сделано, он помогает спланировать следующую итерацию, потом команда собирается и решает, что нужно изменить в процессе и продолжает следующую итерацию.

Довольно важным моментом во всех скрамах, в которых я учавствовал, были опоздания на скрам. На мой взгляд - это важный признак того, что люди не очень хотят работать по скраму, процесс им не очень интересен, или же команды, как таковой, не сложилось, или люди не очень профессиональны в смысле управлением своими "хочу-не хочу". Можно попробовать перенести скрам на время, когда всем удобно, но на мой взгляд, и это очень часто нарушается, скрам должен происходить всегда, когда это возможно, отсутствие кого-то из команды не повод его отменять, желающие могут отвечать за отсутствующих людей, это помогает сохранить процесс и мотивировать людей его посещать, когда они начинают чувствовать, что откололись от целого. 

Еще раз - скрам очень короток, все говорят, что делали, что будут делать, что им мешает это делать. Все обсуждения - на после скрама. Пять минут. Это позволяет людям быть в курсе всего, что делается в проекте, видеть big picture, держать руку на пульсе и при этом не тратить на это кучу времени.

Планирование тоже может быть разным. Самый эффективный, на мой взгляд, способ был - начинать с больших востребованных бизнесом эпиков, типа больших кусков функциональности, очерченных бизнесом. В идеальном процессе описано так, что уже есть готовый бэклог с хорошо описанными задачами, они просто сортируются по приоритету и начинают с самого верха. Но в реальности обычно бывает так - приходит представитель заказчика и говорит - нам нужны такие-то и такие-то вещи и давайте делать их. Соответственно разбор начинается с указанных задач. 

Всегда должно быть место для технического долга или тех задач, которые де факто, трудно отнести к какой-либо бизнес задаче. Часто бывает удобно делать санитарные скрамы, когда в итерацию не делается ничего из бизнес задач, но покрываются все накопившиеся технические.

Самым трудным в планировании, как мне кажется, является совмещение задач на тестирование. Очень некруто, когда программист в итерации 1 сделал фичу, в итерации 2 запланировали тестирование и нашли ряд багов, и только через две недели программист возьмется за их починку. Удобно закладывать некий гэп на починку и если только баг какой-то суперсложный, выделять его в отдельную задачу, которая выносится на планирование. Так же иногда удобно организовывать работу тестировщиков отдельными итерациями (спринтами), хотя тут требуется некоторая ловкость рук в планировании и их гэп нужно закладывать еще больше, чтобы была возможность протестировать горящие фичи внепланово.

С бизнес анализом все несколько проще, но тоже аналитики должны уметь четко оценивать свое время и понимать вероятные сползания, все таки оценить написание спеки сложнее, чем работу программиста. На планировании должны выделяться сложные задачи заранее, предугадывать приоритеты в будущих спринтах, чтобы к тому моменту, когда эту задачу возьмут в спринт, спека уже ждала тепленькая. Тут требуется большая ловкость представителя заказчика в понимании грядущих приоритетов.

После отбора некоторого количества приоритетных задач следует стадия оценки. Лучше делать все пошагово - сначала выбрали задачи, потом их оценили, довольно часто в процессе, который по каждой задаче предполагал немедленный эстимейт, видел, как люди теряют фокус и интерес к процессу планирования. Хотя, опять же, все дело в слаженности и профессиональности команды.

Это абсолютный миф, что задачи оценивают в попугаях, по крайней мере, ни разу такого не встречал. Мне кажется, это просто метафора того, что за превышение оценки или излишние эстимейты никого по голове бить не будут. Это очень помогает разработчикам чувствовать себя свободней и серьезно думать о тех сложностях, которые могут возникнуть при программировании оной.

Мне всегда было удобно оценивать задачи в днях. Даже маленькие задачи можно оценить в полдня и это, скорее всего, будет правильно. День здесь - понятие относительное, это не чистое время работы, а ответ на вопрос - через сколько дней ты сможешь показать результат. Попытка очень мелко гранулировать задачи обычно приводит к тому, что никто ничего не успевает и чувствует фрустрацию, лучше разработчик сделает очень быстро все, что он запланирует, поковыряет в носу полдня, а потом еще сделает что-то сверх скоупа и после этого почувствует себя крутаном. Но и оверэстимейты должны отслеживаться командой, если человек говорит, что он будет делать это неделю, а несколько участников команды говорят, что они сделают это за пару дней, неплохо бы взять какое-то среднее или предложить команде проголосовать.

Тут обычно используются модные scrum карты, но я ни разу не видел, чтобы команда долгое время использовала их для оценок. Обычно всем становится лень показывать их и все просто вслух называют свой эстимейт. Поиграются пару месяцев, а потом забивают. Но хотя, это очень хороший способ, и если в проекте видны большие ошибки в эстимейтах, неплохо бы ввести карты, хотя бы на время.

Эстимейты задач нужны для того, чтобы оценивать скорость (велосити) команды. Это некоторое число трудодней, которые команда обычно делает за спринт. Оно очень редко совпадает с числом людей, умноженных на число дней в спринте. Обычно это варьируется от половины до 70% от данного числа. Но любой процент - не повод наезжать на команду, что она медленно работает или на отдельных людей, которые делают в среднем меньше, чем остальные. Это повод уточнить сами оценки, в идеале, конечно все должно стремится в 100%, или повод посмотреть внимательно на сам рабочий процесс, может, кто-то занимается не тем, чем нужно и нужно больше ротировать людей.

Это вплотную упирается в области ответственности. Всегда удобно иметь людей, каждый из которых хорошо разбирается в своей области системы, но идеал скрама - люди сами берут себе задачи, и нужно поощрять то, что люди пробуют себя в разных областях. Если этот процесс поддерживается, всегда знаешь, кто сможет сделать эту задачу быстрее, что очень полезно. В паре проектов люди разбирали себе задачи еще на этапе планирования и в этом нет ничего страшного, хотя хорошо бы следить, чтобы не было такого, что человек является специалистом только в одной области.

Знание велосити позволяет отсечь обьем задач, которые команда сможет сделать за спринт. Каждое планирование велосити должно уточняться на основе знаний о сделанном скоупе предыдущих спринтов и задачи должны отбираться на основе этого знания.

Тем не менее может быть так, что никакое велосити не считается. Ничего страшного, просто тогда скорее всего все задачи, взятые не спринт, не буду сделаны. Это фрустрирует и демотивирует команду, но в таком случае можно просто брать меньше, чем кажется, что можно сделать, и это работает.

 
